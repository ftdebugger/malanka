"use strict";

module.exports = function () {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser = this,
        peg$FAILED = {},
        peg$startRuleFunctions = { Content: peg$parseContent },
        peg$startRuleFunction = peg$parseContent,
        peg$c0 = "<!doctype ",
        peg$c1 = { type: "literal", value: "<!doctype ", description: "\"<!doctype \"" },
        peg$c2 = /^[^>]/,
        peg$c3 = { type: "class", value: "[^>]", description: "[^>]" },
        peg$c4 = ">",
        peg$c5 = { type: "literal", value: ">", description: "\">\"" },
        peg$c6 = function peg$c6(doctype) {
      return {
        type: 'DocType',
        content: doctype.join('')
      };
    },
        peg$c7 = "<!--",
        peg$c8 = { type: "literal", value: "<!--", description: "\"<!--\"" },
        peg$c9 = "-->",
        peg$c10 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c11 = { type: "any", description: "any character" },
        peg$c12 = function peg$c12(c) {
      return c;
    },
        peg$c13 = function peg$c13(c) {
      return {
        type: 'Comment',
        content: c.join('')
      };
    },
        peg$c14 = function peg$c14(startTag, content, endTag) {
      if (startTag.name !== endTag) {
        error('Expected </' + startTag.name + '> but </' + endTag + '> found.');
      }

      return {
        type: 'BalancedTag',
        name: startTag.name,
        attributes: startTag.attributes,
        content: content
      };
    },
        peg$c15 = "<",
        peg$c16 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c17 = "/>",
        peg$c18 = { type: "literal", value: "/>", description: "\"/>\"" },
        peg$c19 = function peg$c19(name, attributes) {
      return {
        type: 'SelfClosingTag',
        name: name,
        attributes: attributes
      };
    },
        peg$c20 = function peg$c20(name, attributes) {
      return {
        name: name,
        attributes: attributes
      };
    },
        peg$c21 = "</",
        peg$c22 = { type: "literal", value: "</", description: "\"</\"" },
        peg$c23 = function peg$c23(name) {
      return name;
    },
        peg$c24 = /^[a-zA-Z0-9]/,
        peg$c25 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
        peg$c26 = function peg$c26() {
      return text();
    },
        peg$c27 = function peg$c27(attributes) {
      return attributes;
    },
        peg$c28 = function peg$c28(attr) {
      return attr;
    },
        peg$c29 = "=",
        peg$c30 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c31 = function peg$c31(name, value) {
      return {
        name: name,
        value: value
      };
    },
        peg$c32 = function peg$c32(name) {
      return {
        name: name,
        value: null
      };
    },
        peg$c33 = /^[a-zA-Z0-9\-]/,
        peg$c34 = { type: "class", value: "[a-zA-Z0-9\\-]", description: "[a-zA-Z0-9\\-]" },
        peg$c35 = "{",
        peg$c36 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c37 = /^[^{]/,
        peg$c38 = { type: "class", value: "[^{]", description: "[^{]" },
        peg$c39 = function peg$c39() {
      return {
        type: 'Text',
        content: text()
      };
    },
        peg$c40 = /^[^<{]/,
        peg$c41 = { type: "class", value: "[^<{]", description: "[^<{]" },
        peg$c42 = "\"",
        peg$c43 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c44 = function peg$c44(content) {
      return content;
    },
        peg$c45 = function peg$c45(data) {
      return data.join('');
    },
        peg$c46 = /^[^"\\#{]/,
        peg$c47 = { type: "class", value: "[^\"\\\\#{]", description: "[^\"\\\\#{]" },
        peg$c48 = "\\0",
        peg$c49 = { type: "literal", value: "\\0", description: "\"\\\\0\"" },
        peg$c50 = function peg$c50() {
      return '\0';
    },
        peg$c51 = function peg$c51() {
      error('Octal escape sequence is not supported');
    },
        peg$c52 = "\\b",
        peg$c53 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c54 = function peg$c54() {
      return '\b';
    },
        peg$c55 = "\\t",
        peg$c56 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c57 = function peg$c57() {
      return '\t';
    },
        peg$c58 = "\\n",
        peg$c59 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c60 = function peg$c60() {
      return '\n';
    },
        peg$c61 = "\\v",
        peg$c62 = { type: "literal", value: "\\v", description: "\"\\\\v\"" },
        peg$c63 = function peg$c63() {
      return '\v';
    },
        peg$c64 = "\\f",
        peg$c65 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c66 = function peg$c66() {
      return '\f';
    },
        peg$c67 = "\\r",
        peg$c68 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c69 = function peg$c69() {
      return '\r';
    },
        peg$c70 = "\\",
        peg$c71 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c72 = function peg$c72(c) {
      return c;
    },
        peg$c73 = "#",
        peg$c74 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c75 = function peg$c75() {
      return '#';
    },
        peg$c76 = "```",
        peg$c77 = { type: "literal", value: "```", description: "\"```\"" },
        peg$c78 = function peg$c78() {
      return ['`'];
    },
        peg$c79 = "\\`",
        peg$c80 = { type: "literal", value: "\\`", description: "\"\\\\`\"" },
        peg$c81 = "`",
        peg$c82 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c83 = function peg$c83(text) {
      return [text.join('')];
    },
        peg$c84 = function peg$c84(name) {
      return {
        type: 'Path',
        path: name
      };
    },
        peg$c85 = "else",
        peg$c86 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c87 = /^[@_a-zA-Z_0-9.]/,
        peg$c88 = { type: "class", value: "[@_a-zA-Z_0-9.]", description: "[@_a-zA-Z_0-9.]" },
        peg$c89 = function peg$c89(name) {
      return name.join('');
    },
        peg$c90 = function peg$c90(value) {
      return value;
    },
        peg$c91 = function peg$c91(path) {
      return path;
    },
        peg$c92 = function peg$c92(helper) {
      return helper;
    },
        peg$c93 = function peg$c93(string) {
      return string;
    },
        peg$c94 = "{{",
        peg$c95 = { type: "literal", value: "{{", description: "\"{{\"" },
        peg$c96 = "}}",
        peg$c97 = { type: "literal", value: "}}", description: "\"}}\"" },
        peg$c98 = function peg$c98(path, params, hash) {
      return {
        type: 'Expression',
        path: path,
        params: params,
        hash: hash
      };
    },
        peg$c99 = "{{#",
        peg$c100 = { type: "literal", value: "{{#", description: "\"{{#\"" },
        peg$c101 = function peg$c101(path, attributes, hash) {
      return {
        path: path,
        attributes: attributes,
        hash: hash
      };
    },
        peg$c102 = "{{/",
        peg$c103 = { type: "literal", value: "{{/", description: "\"{{/\"" },
        peg$c104 = "{{else}}",
        peg$c105 = { type: "literal", value: "{{else}}", description: "\"{{else}}\"" },
        peg$c106 = function peg$c106(start, content, inverse, close) {
      if (start.path !== close) {
        error('Unmatched block expression. Expected {{/' + start.path + '}} but {{/' + close + '}} found.');
      }

      return {
        type: 'BlockExpression',
        path: start.path,
        params: start.attributes,
        hash: start.hash,
        content: content,
        inverse: inverse
      };
    },
        peg$c107 = "(",
        peg$c108 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c109 = ")",
        peg$c110 = { type: "literal", value: ")", description: "\")\"" },
        peg$c111 = ",",
        peg$c112 = { type: "literal", value: ",", description: "\",\"" },
        peg$c113 = function peg$c113(path, params) {
      return {
        type: 'CallExpression',
        path: path,
        params: params
      };
    },
        peg$c114 = "{{!--",
        peg$c115 = { type: "literal", value: "{{!--", description: "\"{{!--\"" },
        peg$c116 = "--}}",
        peg$c117 = { type: "literal", value: "--}}", description: "\"--}}\"" },
        peg$c118 = function peg$c118(c) {
      return {
        type: 'Comment',
        content: c.join('')
      };
    },
        peg$c119 = "{{!",
        peg$c120 = { type: "literal", value: "{{!", description: "\"{{!\"" },
        peg$c121 = "false",
        peg$c122 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c123 = function peg$c123() {
      return { type: 'Primitive', value: false };
    },
        peg$c124 = "true",
        peg$c125 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c126 = function peg$c126() {
      return { type: 'Primitive', value: true };
    },
        peg$c127 = "null",
        peg$c128 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c129 = function peg$c129() {
      return { type: 'Primitive', value: null };
    },
        peg$c130 = "undefined",
        peg$c131 = { type: "literal", value: "undefined", description: "\"undefined\"" },
        peg$c132 = function peg$c132() {
      return { type: 'Primitive', value: undefined };
    },
        peg$c133 = ".",
        peg$c134 = { type: "literal", value: ".", description: "\".\"" },
        peg$c135 = function peg$c135() {
      return { type: 'Primitive', value: Number(text()) };
    },
        peg$c136 = /^[+\-]/,
        peg$c137 = { type: "class", value: "[+-]", description: "[+-]" },
        peg$c138 = /^[0-9]/,
        peg$c139 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c140 = /^[ \t\r\n]/,
        peg$c141 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(null, [{ type: "other", description: description }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
    }

    function error(message) {
      throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p,
          ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) {
              details.line++;
            }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }

          return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
            return '\\x0' + hex(ch);
          }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
            return '\\x' + hex(ch);
          }).replace(/[\u0100-\u0FFF]/g, function (ch) {
            return "\\u0" + hex(ch);
          }).replace(/[\u1000-\uFFFF]/g, function (ch) {
            return "\\u" + hex(ch);
          });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc,
            foundDesc,
            i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);
    }

    function peg$parseContent() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseEscapedString();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDocType();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBalancedTag();
            if (s1 === peg$FAILED) {
              s1 = peg$parseSelfClosingTag();
              if (s1 === peg$FAILED) {
                s1 = peg$parseBlockExpression();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseExpressionComment();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseExpression();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseText();
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseEscapedString();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDocType();
          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
            if (s1 === peg$FAILED) {
              s1 = peg$parseBalancedTag();
              if (s1 === peg$FAILED) {
                s1 = peg$parseSelfClosingTag();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseBlockExpression();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseExpressionComment();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseExpression();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseText();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDocType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c0) {
        s1 = peg$c0;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c1);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c3);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c3);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c8);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c9) {
          s5 = peg$c9;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c10);
          }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c12(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c9) {
            s5 = peg$c9;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c11);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c12(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c9) {
            s3 = peg$c9;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBalancedTag() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseStartTag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseContent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEndTag();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSelfClosingTag() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTagName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespaces();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c17) {
                s5 = peg$c17;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c18);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStartTag() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTagName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespaces();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c4;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c5);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c20(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEndTag() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTagName();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTagName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c24.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c25);
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c25);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAttributes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAttribute();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAttribute();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAttribute() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValuedAttribute();
        if (s2 === peg$FAILED) {
          s2 = peg$parseValuelessAttribute();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseValuedAttribute() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAttributeName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c29;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c30);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValuedAttributeData();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c31(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseValuelessAttribute() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAttributeName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAttributeName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c33.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c34);
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c33.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c34);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValuedAttributeData() {
      var s0;

      s0 = peg$parseEscapedString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCallExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePrimitive();
          if (s0 === peg$FAILED) {
            s0 = peg$parseExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBlockExpression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseExpressionPath();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseQuotedString();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseText() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c38);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c37.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c38);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c41);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c40.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c41);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseQuotedString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c43);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseExpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBlockExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseString();
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBlockExpression();
            if (s3 === peg$FAILED) {
              s3 = peg$parseString();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c42;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c43);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c44(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStringData();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStringData();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseStringData() {
      var s0, s1, s2, s3;

      if (peg$c46.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c47);
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s1 = peg$c48;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c49);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c50();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c48) {
            s1 = peg$c48;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c49);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseDecimalDigit();
            peg$silentFails--;
            if (s3 !== peg$FAILED) {
              peg$currPos = s2;
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c52) {
              s1 = peg$c52;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c53);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c55) {
                s1 = peg$c55;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c56);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c57();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c58) {
                  s1 = peg$c58;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c59);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c60();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c61) {
                    s1 = peg$c61;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c62);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c63();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c64) {
                      s1 = peg$c64;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c65);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c66();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c67) {
                        s1 = peg$c67;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c68);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c69();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 92) {
                          s1 = peg$c70;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c71);
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c11);
                            }
                          }
                          if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 35) {
                            s1 = peg$c73;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c74);
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 123) {
                              s3 = peg$c35;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c36);
                              }
                            }
                            peg$silentFails--;
                            if (s3 === peg$FAILED) {
                              s2 = void 0;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c75();
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEscapedString() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c76) {
        s1 = peg$c76;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c77);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c78();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c79) {
          s1 = peg$c79;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c80);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c78();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 96) {
            s1 = peg$c81;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c82);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 96) {
              s5 = peg$c81;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c82);
              }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c11);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c12(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 96) {
                s5 = peg$c81;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c82);
                }
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c12(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 96) {
                s3 = peg$c81;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c82);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c83(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseExpressionPath() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseExpressionName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseExpressionName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c85) {
        s2 = peg$c85;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c87.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c88);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c87.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c88);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c89(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionAttribute() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrimitive();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespaces();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapedString();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c90(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsespaces();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExpressionPath();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c29;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = void 0;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c91(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsespaces();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseInlineExpression();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c92(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsespaces();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseQuotedString();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c93(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseExpressionAttributes() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseExpressionAttribute();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseExpressionAttribute();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionHashValue() {
      var s0;

      s0 = peg$parsePrimitive();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapedString();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExpressionPath();
          if (s0 === peg$FAILED) {
            s0 = peg$parseInlineExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseQuotedString();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseExpressionHashAttribute() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsespaces();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionName();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c30);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionHashValue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionHash() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseExpressionHashAttribute();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseExpressionHashAttribute();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c94) {
        s1 = peg$c94;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c95);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionAttributes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionHash();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsespaces();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c96) {
                  s6 = peg$c96;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c98(s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStartBlockExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c99) {
        s1 = peg$c99;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c100);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionAttributes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionHash();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsespaces();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c96) {
                  s6 = peg$c96;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c101(s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCloseBlockExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c102) {
        s1 = peg$c102;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c103);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionName();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c96) {
            s3 = peg$c96;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c97);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInverseBlockExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c104) {
        s1 = peg$c104;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c105);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseContent();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBlockExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseStartBlockExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseContent();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInverseBlockExpression();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseBlockExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c106(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInlineExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c107;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c108);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionAttributes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionHash();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsespaces();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c109;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c110);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c98(s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCallExpressionAttribute() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c111;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c112);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCallExpressionAttribute();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespaces();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExpressionHashValue();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c90(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseCallExpressionAttributes() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseCallExpressionAttribute();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseCallExpressionAttribute();
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseExpressionName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c107;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c108);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCallExpressionAttributes();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c109;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c110);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c113(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c115);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c116) {
          s5 = peg$c116;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c117);
          }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c12(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 4) === peg$c116) {
            s5 = peg$c116;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c117);
            }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c11);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c12(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c116) {
            s3 = peg$c116;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c117);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c118(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s1 = peg$c119;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c120);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c96) {
            s5 = peg$c96;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c97);
            }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c11);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c12(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c96) {
              s5 = peg$c96;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c11);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c12(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c96) {
              s3 = peg$c96;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c118(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsePrimitive() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c121) {
        s1 = peg$c121;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c122);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c124) {
          s1 = peg$c124;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c125);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c126();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c127) {
            s1 = peg$c127;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c128);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c129();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c130) {
              s1 = peg$c130;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c131);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c132();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSignedInteger();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s2 = peg$c133;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c134);
                  }
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseDecimalDigit();
                  if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseDecimalDigit();
                    }
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c135();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSignedInteger();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c135();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c136.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c137);
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c138.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c139);
        }
      }

      return s0;
    }

    function peg$parsespaces() {
      var s0, s1;

      s0 = [];
      if (peg$c140.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c141);
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c140.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c141);
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9UZW1wbGF0ZS9UZW1wbGF0ZVBhcnNlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sT0FBUCxHQUFrQixZQUFXO0FBQzNCOztBQUVBOzs7Ozs7QUFNQSxXQUFTLFlBQVQsQ0FBc0IsS0FBdEIsRUFBNkIsTUFBN0IsRUFBcUM7QUFDbkMsYUFBUyxJQUFULEdBQWdCO0FBQUUsV0FBSyxXQUFMLEdBQW1CLEtBQW5CO0FBQTJCO0FBQzdDLFNBQUssU0FBTCxHQUFpQixPQUFPLFNBQXhCO0FBQ0EsVUFBTSxTQUFOLEdBQWtCLElBQUksSUFBSixFQUFsQjtBQUNEOztBQUVELFdBQVMsZUFBVCxDQUF5QixPQUF6QixFQUFrQyxRQUFsQyxFQUE0QyxLQUE1QyxFQUFtRCxRQUFuRCxFQUE2RDtBQUMzRCxTQUFLLE9BQUwsR0FBZ0IsT0FBaEI7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxTQUFLLEtBQUwsR0FBZ0IsS0FBaEI7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxTQUFLLElBQUwsR0FBZ0IsYUFBaEI7O0FBRUEsUUFBSSxPQUFPLE1BQU0saUJBQWIsS0FBbUMsVUFBdkMsRUFBbUQ7QUFDakQsWUFBTSxpQkFBTixDQUF3QixJQUF4QixFQUE4QixlQUE5QjtBQUNEO0FBQ0Y7O0FBRUQsZUFBYSxlQUFiLEVBQThCLEtBQTlCOztBQUVBLFdBQVMsU0FBVCxDQUFtQixLQUFuQixFQUEwQjtBQUN4QixRQUFJLFVBQVUsVUFBVSxNQUFWLEdBQW1CLENBQW5CLEdBQXVCLFVBQVUsQ0FBVixDQUF2QixHQUFzQyxFQUFwRDtBQUFBLFFBQ0ksU0FBVSxJQURkO0FBQUEsUUFHSSxhQUFhLEVBSGpCO0FBQUEsUUFLSSx5QkFBeUIsRUFBRSxTQUFTLGdCQUFYLEVBTDdCO0FBQUEsUUFNSSx3QkFBeUIsZ0JBTjdCO0FBQUEsUUFRSSxTQUFTLFlBUmI7QUFBQSxRQVNJLFNBQVMsRUFBRSxNQUFNLFNBQVIsRUFB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QUFDTCxpQkFBSyxVQUFMO0FBQ0EsZ0JBQUksb0JBQW9CLENBQXhCLEVBQTJCO0FBQUUsdUJBQVMsUUFBVDtBQUFxQjtBQUNuRDtBQUNGO0FBQ0YsT0FYRCxNQVdPO0FBQ0wsYUFBSyxVQUFMO0FBQ0Q7O0FBRUQsYUFBTyxFQUFQO0FBQ0Q7O0FBRUQsaUJBQWEsdUJBQWI7O0FBRUEsUUFBSSxlQUFlLFVBQWYsSUFBNkIsZ0JBQWdCLE1BQU0sTUFBdkQsRUFBK0Q7QUFDN0QsYUFBTyxVQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxlQUFlLFVBQWYsSUFBNkIsY0FBYyxNQUFNLE1BQXJELEVBQTZEO0FBQzNELGlCQUFTLEVBQUUsTUFBTSxLQUFSLEVBQWUsYUFBYSxjQUE1QixFQUFUO0FBQ0Q7O0FBRUQsWUFBTSxtQkFDSixJQURJLEVBRUosbUJBRkksRUFHSixpQkFBaUIsTUFBTSxNQUF2QixHQUFnQyxNQUFNLE1BQU4sQ0FBYSxjQUFiLENBQWhDLEdBQStELElBSDNELEVBSUosaUJBQWlCLE1BQU0sTUFBdkIsR0FDSSxvQkFBb0IsY0FBcEIsRUFBb0MsaUJBQWlCLENBQXJELENBREosR0FFSSxvQkFBb0IsY0FBcEIsRUFBb0MsY0FBcEMsQ0FOQSxDQUFOO0FBUUQ7QUFDRjs7QUFFRCxTQUFPO0FBQ0wsaUJBQWEsZUFEUjtBQUVMLFdBQWE7QUFGUixHQUFQO0FBSUQsQ0F0dUZnQixFQUFqQiIsImZpbGUiOiJUZW1wbGF0ZVBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvKlxuICAgKiBHZW5lcmF0ZWQgYnkgUEVHLmpzIDAuOS4wLlxuICAgKlxuICAgKiBodHRwOi8vcGVnanMub3JnL1xuICAgKi9cblxuICBmdW5jdGlvbiBwZWckc3ViY2xhc3MoY2hpbGQsIHBhcmVudCkge1xuICAgIGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfVxuICAgIGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJFN5bnRheEVycm9yKG1lc3NhZ2UsIGV4cGVjdGVkLCBmb3VuZCwgbG9jYXRpb24pIHtcbiAgICB0aGlzLm1lc3NhZ2UgID0gbWVzc2FnZTtcbiAgICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgdGhpcy5mb3VuZCAgICA9IGZvdW5kO1xuICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB0aGlzLm5hbWUgICAgID0gXCJTeW50YXhFcnJvclwiO1xuXG4gICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBwZWckU3ludGF4RXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHBlZyRzdWJjbGFzcyhwZWckU3ludGF4RXJyb3IsIEVycm9yKTtcblxuICBmdW5jdGlvbiBwZWckcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgIHBhcnNlciAgPSB0aGlzLFxuXG4gICAgICAgIHBlZyRGQUlMRUQgPSB7fSxcblxuICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb25zID0geyBDb250ZW50OiBwZWckcGFyc2VDb250ZW50IH0sXG4gICAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbiAgPSBwZWckcGFyc2VDb250ZW50LFxuXG4gICAgICAgIHBlZyRjMCA9IFwiPCFkb2N0eXBlIFwiLFxuICAgICAgICBwZWckYzEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI8IWRvY3R5cGUgXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI8IWRvY3R5cGUgXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMiA9IC9eW14+XS8sXG4gICAgICAgIHBlZyRjMyA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbXj5dXCIsIGRlc2NyaXB0aW9uOiBcIltePl1cIiB9LFxuICAgICAgICBwZWckYzQgPSBcIj5cIixcbiAgICAgICAgcGVnJGM1ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiPlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiPlxcXCJcIiB9LFxuICAgICAgICBwZWckYzYgPSBmdW5jdGlvbihkb2N0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdEb2NUeXBlJyxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBkb2N0eXBlLmpvaW4oJycpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwZWckYzcgPSBcIjwhLS1cIixcbiAgICAgICAgcGVnJGM4ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiPCEtLVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiPCEtLVxcXCJcIiB9LFxuICAgICAgICBwZWckYzkgPSBcIi0tPlwiLFxuICAgICAgICBwZWckYzEwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiLS0+XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCItLT5cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMSA9IHsgdHlwZTogXCJhbnlcIiwgZGVzY3JpcHRpb246IFwiYW55IGNoYXJhY3RlclwiIH0sXG4gICAgICAgIHBlZyRjMTIgPSBmdW5jdGlvbihjKSB7cmV0dXJuIGN9LFxuICAgICAgICBwZWckYzEzID0gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQ29tbWVudCcsXG4gICAgICAgICAgICAgICAgY29udGVudDogYy5qb2luKCcnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxNCA9IGZ1bmN0aW9uKHN0YXJ0VGFnLCBjb250ZW50LCBlbmRUYWcpIHtcbiAgICAgICAgICAgIGlmIChzdGFydFRhZy5uYW1lICE9PSBlbmRUYWcpIHtcbiAgICAgICAgICAgICAgICBlcnJvcignRXhwZWN0ZWQgPC8nICsgc3RhcnRUYWcubmFtZSArICc+IGJ1dCA8LycgKyBlbmRUYWcgKyAnPiBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQmFsYW5jZWRUYWcnLFxuICAgICAgICAgICAgICAgIG5hbWU6IHN0YXJ0VGFnLm5hbWUsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogc3RhcnRUYWcuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwZWckYzE1ID0gXCI8XCIsXG4gICAgICAgIHBlZyRjMTYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI8XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI8XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTcgPSBcIi8+XCIsXG4gICAgICAgIHBlZyRjMTggPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIvPlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiLz5cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxOSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NlbGZDbG9zaW5nVGFnJyxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBlZyRjMjAgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcGVnJGMyMSA9IFwiPC9cIixcbiAgICAgICAgcGVnJGMyMiA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIjwvXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI8L1xcXCJcIiB9LFxuICAgICAgICBwZWckYzIzID0gZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gbmFtZSB9LFxuICAgICAgICBwZWckYzI0ID0gL15bYS16QS1aMC05XS8sXG4gICAgICAgIHBlZyRjMjUgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW2EtekEtWjAtOV1cIiwgZGVzY3JpcHRpb246IFwiW2EtekEtWjAtOV1cIiB9LFxuICAgICAgICBwZWckYzI2ID0gZnVuY3Rpb24oKSB7IHJldHVybiB0ZXh0KCkgfSxcbiAgICAgICAgcGVnJGMyNyA9IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHsgcmV0dXJuIGF0dHJpYnV0ZXMgfSxcbiAgICAgICAgcGVnJGMyOCA9IGZ1bmN0aW9uKGF0dHIpIHsgcmV0dXJuIGF0dHIgfSxcbiAgICAgICAgcGVnJGMyOSA9IFwiPVwiLFxuICAgICAgICBwZWckYzMwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiPVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiPVxcXCJcIiB9LFxuICAgICAgICBwZWckYzMxID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBlZyRjMzIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBlZyRjMzMgPSAvXlthLXpBLVowLTlcXC1dLyxcbiAgICAgICAgcGVnJGMzNCA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbYS16QS1aMC05XFxcXC1dXCIsIGRlc2NyaXB0aW9uOiBcIlthLXpBLVowLTlcXFxcLV1cIiB9LFxuICAgICAgICBwZWckYzM1ID0gXCJ7XCIsXG4gICAgICAgIHBlZyRjMzYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ7XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ7XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMzcgPSAvXltee10vLFxuICAgICAgICBwZWckYzM4ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltee11cIiwgZGVzY3JpcHRpb246IFwiW157XVwiIH0sXG4gICAgICAgIHBlZyRjMzkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRleHQoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzQwID0gL15bXjx7XS8sXG4gICAgICAgIHBlZyRjNDEgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW148e11cIiwgZGVzY3JpcHRpb246IFwiW148e11cIiB9LFxuICAgICAgICBwZWckYzQyID0gXCJcXFwiXCIsXG4gICAgICAgIHBlZyRjNDMgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFwiXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJcXFxcXFxcIlxcXCJcIiB9LFxuICAgICAgICBwZWckYzQ0ID0gZnVuY3Rpb24oY29udGVudCkgeyByZXR1cm4gY29udGVudCB9LFxuICAgICAgICBwZWckYzQ1ID0gZnVuY3Rpb24oZGF0YSkgeyByZXR1cm4gZGF0YS5qb2luKCcnKSB9LFxuICAgICAgICBwZWckYzQ2ID0gL15bXlwiXFxcXCN7XS8sXG4gICAgICAgIHBlZyRjNDcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW15cXFwiXFxcXFxcXFwje11cIiwgZGVzY3JpcHRpb246IFwiW15cXFwiXFxcXFxcXFwje11cIiB9LFxuICAgICAgICBwZWckYzQ4ID0gXCJcXFxcMFwiLFxuICAgICAgICBwZWckYzQ5ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXFxcXDBcIiwgZGVzY3JpcHRpb246IFwiXFxcIlxcXFxcXFxcMFxcXCJcIiB9LFxuICAgICAgICBwZWckYzUwID0gZnVuY3Rpb24oKSB7IHJldHVybiAnXFwwJyB9LFxuICAgICAgICBwZWckYzUxID0gZnVuY3Rpb24oKSB7IGVycm9yKCdPY3RhbCBlc2NhcGUgc2VxdWVuY2UgaXMgbm90IHN1cHBvcnRlZCcpIH0sXG4gICAgICAgIHBlZyRjNTIgPSBcIlxcXFxiXCIsXG4gICAgICAgIHBlZyRjNTMgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcYlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFxiXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNTQgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXGInIH0sXG4gICAgICAgIHBlZyRjNTUgPSBcIlxcXFx0XCIsXG4gICAgICAgIHBlZyRjNTYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcdFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFx0XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNTcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXHQnIH0sXG4gICAgICAgIHBlZyRjNTggPSBcIlxcXFxuXCIsXG4gICAgICAgIHBlZyRjNTkgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcblwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFxuXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNjAgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXG4nIH0sXG4gICAgICAgIHBlZyRjNjEgPSBcIlxcXFx2XCIsXG4gICAgICAgIHBlZyRjNjIgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcdlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFx2XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNjMgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXHYnIH0sXG4gICAgICAgIHBlZyRjNjQgPSBcIlxcXFxmXCIsXG4gICAgICAgIHBlZyRjNjUgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcZlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFxmXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNjYgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXGYnIH0sXG4gICAgICAgIHBlZyRjNjcgPSBcIlxcXFxyXCIsXG4gICAgICAgIHBlZyRjNjggPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXFxcclwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFxyXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNjkgPSBmdW5jdGlvbigpIHsgcmV0dXJuICdcXHInIH0sXG4gICAgICAgIHBlZyRjNzAgPSBcIlxcXFxcIixcbiAgICAgICAgcGVnJGM3MSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIlxcXFxcIiwgZGVzY3JpcHRpb246IFwiXFxcIlxcXFxcXFxcXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNzIgPSBmdW5jdGlvbihjKSB7IHJldHVybiBjIH0sXG4gICAgICAgIHBlZyRjNzMgPSBcIiNcIixcbiAgICAgICAgcGVnJGM3NCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiNcIiwgZGVzY3JpcHRpb246IFwiXFxcIiNcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM3NSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gJyMnIH0sXG4gICAgICAgIHBlZyRjNzYgPSBcImBgYFwiLFxuICAgICAgICBwZWckYzc3ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiYGBgXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJgYGBcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM3OCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gWydgJ10gfSxcbiAgICAgICAgcGVnJGM3OSA9IFwiXFxcXGBcIixcbiAgICAgICAgcGVnJGM4MCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIlxcXFxgXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJcXFxcXFxcXGBcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM4MSA9IFwiYFwiLFxuICAgICAgICBwZWckYzgyID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiYFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiYFxcXCJcIiB9LFxuICAgICAgICBwZWckYzgzID0gZnVuY3Rpb24odGV4dCkgeyByZXR1cm4gW3RleHQuam9pbignJyldIH0sXG4gICAgICAgIHBlZyRjODQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdQYXRoJyxcbiAgICAgICAgICAgICAgICBwYXRoOiBuYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwZWckYzg1ID0gXCJlbHNlXCIsXG4gICAgICAgIHBlZyRjODYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJlbHNlXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJlbHNlXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjODcgPSAvXltAX2EtekEtWl8wLTkuXS8sXG4gICAgICAgIHBlZyRjODggPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW0BfYS16QS1aXzAtOS5dXCIsIGRlc2NyaXB0aW9uOiBcIltAX2EtekEtWl8wLTkuXVwiIH0sXG4gICAgICAgIHBlZyRjODkgPSBmdW5jdGlvbihuYW1lKSB7IHJldHVybiBuYW1lLmpvaW4oJycpIH0sXG4gICAgICAgIHBlZyRjOTAgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWUgfSxcbiAgICAgICAgcGVnJGM5MSA9IGZ1bmN0aW9uKHBhdGgpIHsgcmV0dXJuIHBhdGggfSxcbiAgICAgICAgcGVnJGM5MiA9IGZ1bmN0aW9uKGhlbHBlcikgeyByZXR1cm4gaGVscGVyIH0sXG4gICAgICAgIHBlZyRjOTMgPSBmdW5jdGlvbihzdHJpbmcpIHsgcmV0dXJuIHN0cmluZyB9LFxuICAgICAgICBwZWckYzk0ID0gXCJ7e1wiLFxuICAgICAgICBwZWckYzk1ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwie3tcIiwgZGVzY3JpcHRpb246IFwiXFxcInt7XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjOTYgPSBcIn19XCIsXG4gICAgICAgIHBlZyRjOTcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ9fVwiLCBkZXNjcmlwdGlvbjogXCJcXFwifX1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGM5OCA9IGZ1bmN0aW9uKHBhdGgsIHBhcmFtcywgaGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICBoYXNoOiBoYXNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwZWckYzk5ID0gXCJ7eyNcIixcbiAgICAgICAgcGVnJGMxMDAgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ7eyNcIiwgZGVzY3JpcHRpb246IFwiXFxcInt7I1xcXCJcIiB9LFxuICAgICAgICBwZWckYzEwMSA9IGZ1bmN0aW9uKHBhdGgsIGF0dHJpYnV0ZXMsIGhhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGhhc2g6IGhhc2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBlZyRjMTAyID0gXCJ7ey9cIixcbiAgICAgICAgcGVnJGMxMDMgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ7ey9cIiwgZGVzY3JpcHRpb246IFwiXFxcInt7L1xcXCJcIiB9LFxuICAgICAgICBwZWckYzEwNCA9IFwie3tlbHNlfX1cIixcbiAgICAgICAgcGVnJGMxMDUgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ7e2Vsc2V9fVwiLCBkZXNjcmlwdGlvbjogXCJcXFwie3tlbHNlfX1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMDYgPSBmdW5jdGlvbihzdGFydCwgY29udGVudCwgaW52ZXJzZSwgY2xvc2UpIHtcbiAgICAgICAgICAgIGlmIChzdGFydC5wYXRoICE9PSBjbG9zZSkge1xuICAgICAgICAgICAgICAgIGVycm9yKCdVbm1hdGNoZWQgYmxvY2sgZXhwcmVzc2lvbi4gRXhwZWN0ZWQge3svJyArIHN0YXJ0LnBhdGggKyAnfX0gYnV0IHt7LycgKyBjbG9zZSArICd9fSBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQmxvY2tFeHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBwYXRoOiBzdGFydC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmFtczogc3RhcnQuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBoYXNoOiBzdGFydC5oYXNoLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgaW52ZXJzZTogaW52ZXJzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxMDcgPSBcIihcIixcbiAgICAgICAgcGVnJGMxMDggPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIoXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIoXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTA5ID0gXCIpXCIsXG4gICAgICAgIHBlZyRjMTEwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiKVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiKVxcXCJcIiB9LFxuICAgICAgICBwZWckYzExMSA9IFwiLFwiLFxuICAgICAgICBwZWckYzExMiA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIixcIiwgZGVzY3JpcHRpb246IFwiXFxcIixcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMTMgPSBmdW5jdGlvbihwYXRoLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0NhbGxFeHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwZWckYzExNCA9IFwie3shLS1cIixcbiAgICAgICAgcGVnJGMxMTUgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ7eyEtLVwiLCBkZXNjcmlwdGlvbjogXCJcXFwie3shLS1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMTYgPSBcIi0tfX1cIixcbiAgICAgICAgcGVnJGMxMTcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCItLX19XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCItLX19XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTE4ID0gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDb21tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogYy5qb2luKCcnKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzExOSA9IFwie3shXCIsXG4gICAgICAgIHBlZyRjMTIwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwie3shXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ7eyFcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMjEgPSBcImZhbHNlXCIsXG4gICAgICAgIHBlZyRjMTIyID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiZmFsc2VcIiwgZGVzY3JpcHRpb246IFwiXFxcImZhbHNlXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTIzID0gZnVuY3Rpb24oKSB7IHJldHVybiB7dHlwZTogJ1ByaW1pdGl2ZScsIHZhbHVlOiBmYWxzZX0gfSxcbiAgICAgICAgcGVnJGMxMjQgPSBcInRydWVcIixcbiAgICAgICAgcGVnJGMxMjUgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ0cnVlXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ0cnVlXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTI2ID0gZnVuY3Rpb24oKSB7IHJldHVybiB7dHlwZTogJ1ByaW1pdGl2ZScsIHZhbHVlOiB0cnVlfSB9LFxuICAgICAgICBwZWckYzEyNyA9IFwibnVsbFwiLFxuICAgICAgICBwZWckYzEyOCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIm51bGxcIiwgZGVzY3JpcHRpb246IFwiXFxcIm51bGxcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMjkgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHt0eXBlOiAnUHJpbWl0aXZlJywgdmFsdWU6IG51bGx9IH0sXG4gICAgICAgIHBlZyRjMTMwID0gXCJ1bmRlZmluZWRcIixcbiAgICAgICAgcGVnJGMxMzEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ1bmRlZmluZWRcIiwgZGVzY3JpcHRpb246IFwiXFxcInVuZGVmaW5lZFxcXCJcIiB9LFxuICAgICAgICBwZWckYzEzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4ge3R5cGU6ICdQcmltaXRpdmUnLCB2YWx1ZTogdW5kZWZpbmVkfSB9LFxuICAgICAgICBwZWckYzEzMyA9IFwiLlwiLFxuICAgICAgICBwZWckYzEzNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIi5cIiwgZGVzY3JpcHRpb246IFwiXFxcIi5cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMzUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHt0eXBlOiAnUHJpbWl0aXZlJywgdmFsdWU6IE51bWJlcih0ZXh0KCkpfSB9LFxuICAgICAgICBwZWckYzEzNiA9IC9eWytcXC1dLyxcbiAgICAgICAgcGVnJGMxMzcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWystXVwiLCBkZXNjcmlwdGlvbjogXCJbKy1dXCIgfSxcbiAgICAgICAgcGVnJGMxMzggPSAvXlswLTldLyxcbiAgICAgICAgcGVnJGMxMzkgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWzAtOV1cIiwgZGVzY3JpcHRpb246IFwiWzAtOV1cIiB9LFxuICAgICAgICBwZWckYzE0MCA9IC9eWyBcXHRcXHJcXG5dLyxcbiAgICAgICAgcGVnJGMxNDEgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWyBcXFxcdFxcXFxyXFxcXG5dXCIsIGRlc2NyaXB0aW9uOiBcIlsgXFxcXHRcXFxcclxcXFxuXVwiIH0sXG5cbiAgICAgICAgcGVnJGN1cnJQb3MgICAgICAgICAgPSAwLFxuICAgICAgICBwZWckc2F2ZWRQb3MgICAgICAgICA9IDAsXG4gICAgICAgIHBlZyRwb3NEZXRhaWxzQ2FjaGUgID0gW3sgbGluZTogMSwgY29sdW1uOiAxLCBzZWVuQ1I6IGZhbHNlIH1dLFxuICAgICAgICBwZWckbWF4RmFpbFBvcyAgICAgICA9IDAsXG4gICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgID0gW10sXG4gICAgICAgIHBlZyRzaWxlbnRGYWlscyAgICAgID0gMCxcblxuICAgICAgICBwZWckcmVzdWx0O1xuXG4gICAgaWYgKFwic3RhcnRSdWxlXCIgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKCEob3B0aW9ucy5zdGFydFJ1bGUgaW4gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgcGFyc2luZyBmcm9tIHJ1bGUgXFxcIlwiICsgb3B0aW9ucy5zdGFydFJ1bGUgKyBcIlxcXCIuXCIpO1xuICAgICAgfVxuXG4gICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gPSBwZWckc3RhcnRSdWxlRnVuY3Rpb25zW29wdGlvbnMuc3RhcnRSdWxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZyhwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGVjdGVkKGRlc2NyaXB0aW9uKSB7XG4gICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24oXG4gICAgICAgIG51bGwsXG4gICAgICAgIFt7IHR5cGU6IFwib3RoZXJcIiwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIH1dLFxuICAgICAgICBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksXG4gICAgICAgIHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgICAgdGhyb3cgcGVnJGJ1aWxkRXhjZXB0aW9uKFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBudWxsLFxuICAgICAgICBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksXG4gICAgICAgIHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcykge1xuICAgICAgdmFyIGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3Bvc10sXG4gICAgICAgICAgcCwgY2g7XG5cbiAgICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcCA9IHBvcyAtIDE7XG4gICAgICAgIHdoaWxlICghcGVnJHBvc0RldGFpbHNDYWNoZVtwXSkge1xuICAgICAgICAgIHAtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3BdO1xuICAgICAgICBkZXRhaWxzID0ge1xuICAgICAgICAgIGxpbmU6ICAgZGV0YWlscy5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZGV0YWlscy5jb2x1bW4sXG4gICAgICAgICAgc2VlbkNSOiBkZXRhaWxzLnNlZW5DUlxuICAgICAgICB9O1xuXG4gICAgICAgIHdoaWxlIChwIDwgcG9zKSB7XG4gICAgICAgICAgY2ggPSBpbnB1dC5jaGFyQXQocCk7XG4gICAgICAgICAgaWYgKGNoID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBpZiAoIWRldGFpbHMuc2VlbkNSKSB7IGRldGFpbHMubGluZSsrOyB9XG4gICAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiXFxyXCIgfHwgY2ggPT09IFwiXFx1MjAyOFwiIHx8IGNoID09PSBcIlxcdTIwMjlcIikge1xuICAgICAgICAgICAgZGV0YWlscy5saW5lKys7XG4gICAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRldGFpbHMuY29sdW1uKys7XG4gICAgICAgICAgICBkZXRhaWxzLnNlZW5DUiA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHArKztcbiAgICAgICAgfVxuXG4gICAgICAgIHBlZyRwb3NEZXRhaWxzQ2FjaGVbcG9zXSA9IGRldGFpbHM7XG4gICAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRjb21wdXRlTG9jYXRpb24oc3RhcnRQb3MsIGVuZFBvcykge1xuICAgICAgdmFyIHN0YXJ0UG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhzdGFydFBvcyksXG4gICAgICAgICAgZW5kUG9zRGV0YWlscyAgID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKGVuZFBvcyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgb2Zmc2V0OiBzdGFydFBvcyxcbiAgICAgICAgICBsaW5lOiAgIHN0YXJ0UG9zRGV0YWlscy5saW5lLFxuICAgICAgICAgIGNvbHVtbjogc3RhcnRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBvZmZzZXQ6IGVuZFBvcyxcbiAgICAgICAgICBsaW5lOiAgIGVuZFBvc0RldGFpbHMubGluZSxcbiAgICAgICAgICBjb2x1bW46IGVuZFBvc0RldGFpbHMuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChwZWckY3VyclBvcyA8IHBlZyRtYXhGYWlsUG9zKSB7IHJldHVybjsgfVxuXG4gICAgICBpZiAocGVnJGN1cnJQb3MgPiBwZWckbWF4RmFpbFBvcykge1xuICAgICAgICBwZWckbWF4RmFpbFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckbWF4RmFpbEV4cGVjdGVkID0gW107XG4gICAgICB9XG5cbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGJ1aWxkRXhjZXB0aW9uKG1lc3NhZ2UsIGV4cGVjdGVkLCBmb3VuZCwgbG9jYXRpb24pIHtcbiAgICAgIGZ1bmN0aW9uIGNsZWFudXBFeHBlY3RlZChleHBlY3RlZCkge1xuICAgICAgICB2YXIgaSA9IDE7XG5cbiAgICAgICAgZXhwZWN0ZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgaWYgKGEuZGVzY3JpcHRpb24gPCBiLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIGlmIChhLmRlc2NyaXB0aW9uID4gYi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBleHBlY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZXhwZWN0ZWRbaSAtIDFdID09PSBleHBlY3RlZFtpXSkge1xuICAgICAgICAgICAgZXhwZWN0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkTWVzc2FnZShleHBlY3RlZCwgZm91bmQpIHtcbiAgICAgICAgZnVuY3Rpb24gc3RyaW5nRXNjYXBlKHMpIHtcbiAgICAgICAgICBmdW5jdGlvbiBoZXgoY2gpIHsgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH1cblxuICAgICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAgICdcXFxcXFxcXCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgICAgJ1xcXFxcIicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx4MDgvZywgJ1xcXFxiJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgICAnXFxcXHQnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAgICdcXFxcbicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICAgJ1xcXFxmJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgICAnXFxcXHInKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwN1xceDBCXFx4MEVcXHgwRl0vZywgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceDAnICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg4MC1cXHhGRl0vZywgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceCcgICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDEwMC1cXHUwRkZGXS9nLCAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHUwJyArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xcdTEwMDAtXFx1RkZGRl0vZywgICAgICAgICBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx1JyAgKyBoZXgoY2gpOyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleHBlY3RlZERlc2NzID0gbmV3IEFycmF5KGV4cGVjdGVkLmxlbmd0aCksXG4gICAgICAgICAgICBleHBlY3RlZERlc2MsIGZvdW5kRGVzYywgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXhwZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBleHBlY3RlZERlc2NzW2ldID0gZXhwZWN0ZWRbaV0uZGVzY3JpcHRpb247XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3RlZERlc2MgPSBleHBlY3RlZC5sZW5ndGggPiAxXG4gICAgICAgICAgPyBleHBlY3RlZERlc2NzLnNsaWNlKDAsIC0xKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgKyBcIiBvciBcIlxuICAgICAgICAgICAgICArIGV4cGVjdGVkRGVzY3NbZXhwZWN0ZWQubGVuZ3RoIC0gMV1cbiAgICAgICAgICA6IGV4cGVjdGVkRGVzY3NbMF07XG5cbiAgICAgICAgZm91bmREZXNjID0gZm91bmQgPyBcIlxcXCJcIiArIHN0cmluZ0VzY2FwZShmb3VuZCkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG5cbiAgICAgICAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIgKyBleHBlY3RlZERlc2MgKyBcIiBidXQgXCIgKyBmb3VuZERlc2MgKyBcIiBmb3VuZC5cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4cGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFudXBFeHBlY3RlZChleHBlY3RlZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgcGVnJFN5bnRheEVycm9yKFxuICAgICAgICBtZXNzYWdlICE9PSBudWxsID8gbWVzc2FnZSA6IGJ1aWxkTWVzc2FnZShleHBlY3RlZCwgZm91bmQpLFxuICAgICAgICBleHBlY3RlZCxcbiAgICAgICAgZm91bmQsXG4gICAgICAgIGxvY2F0aW9uXG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUNvbnRlbnQoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IFtdO1xuICAgICAgczEgPSBwZWckcGFyc2VFc2NhcGVkU3RyaW5nKCk7XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckcGFyc2VEb2NUeXBlKCk7XG4gICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlQ29tbWVudCgpO1xuICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckcGFyc2VCYWxhbmNlZFRhZygpO1xuICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlU2VsZkNsb3NpbmdUYWcoKTtcbiAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VCbG9ja0V4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlRXhwcmVzc2lvbkNvbW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VUZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgczEgPSBwZWckcGFyc2VFc2NhcGVkU3RyaW5nKCk7XG4gICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlRG9jVHlwZSgpO1xuICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckcGFyc2VDb21tZW50KCk7XG4gICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VCYWxhbmNlZFRhZygpO1xuICAgICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZVNlbGZDbG9zaW5nVGFnKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZUJsb2NrRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlRXhwcmVzc2lvbkNvbW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZVRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURvY1R5cGUoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAxMCkgPT09IHBlZyRjMCkge1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMTA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIGlmIChwZWckYzIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMyk7IH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICBpZiAocGVnJGMyLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYyKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjNDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzYoczIpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUNvbW1lbnQoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzcpIHtcbiAgICAgICAgczEgPSBwZWckYzc7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGM5KSB7XG4gICAgICAgICAgczUgPSBwZWckYzk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwKTsgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgIHM0ID0gcGVnJGMxMihzNSk7XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjOSkge1xuICAgICAgICAgICAgczUgPSBwZWckYzk7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTApOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSB2b2lkIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjMTIoczUpO1xuICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGM5KSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjOTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxMyhzMik7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQmFsYW5jZWRUYWcoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VDb250ZW50KCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlRW5kVGFnKCk7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxNChzMSwgczIsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VTZWxmQ2xvc2luZ1RhZygpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MCkge1xuICAgICAgICBzMSA9IHBlZyRjMTU7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZVRhZ05hbWUoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VBdHRyaWJ1dGVzKCk7XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTcpIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRjMTc7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE4KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxOShzMiwgczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVN0YXJ0VGFnKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYwKSB7XG4gICAgICAgIHMxID0gcGVnJGMxNTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlVGFnTmFtZSgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZUF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYyKSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzQ7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzUpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzIwKHMyLCBzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlRW5kVGFnKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjEpIHtcbiAgICAgICAgczEgPSBwZWckYzIxO1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VUYWdOYW1lKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjIpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGM0O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjMoczIpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVRhZ05hbWUoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gW107XG4gICAgICBpZiAocGVnJGMyNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI1KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgIGlmIChwZWckYzI0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzI2KCk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQXR0cmlidXRlcygpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlc3BhY2VzKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckcGFyc2VBdHRyaWJ1dGUoKTtcbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VBdHRyaWJ1dGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMjcoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUF0dHJpYnV0ZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VWYWx1ZWRBdHRyaWJ1dGUoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2VWYWx1ZWxlc3NBdHRyaWJ1dGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMjgoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVZhbHVlZEF0dHJpYnV0ZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlQXR0cmlidXRlTmFtZSgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjMjk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMwKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlVmFsdWVkQXR0cmlidXRlRGF0YSgpO1xuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMzEoczEsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VWYWx1ZWxlc3NBdHRyaWJ1dGUoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VBdHRyaWJ1dGVOYW1lKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzMihzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQXR0cmlidXRlTmFtZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBbXTtcbiAgICAgIGlmIChwZWckYzMzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzQpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgaWYgKHBlZyRjMzMudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM0KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMjYoKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VWYWx1ZWRBdHRyaWJ1dGVEYXRhKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBzMCA9IHBlZyRwYXJzZUVzY2FwZWRTdHJpbmcoKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZUNhbGxFeHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlUHJpbWl0aXZlKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZUJsb2NrRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZUV4cHJlc3Npb25QYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZVF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlVGV4dCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTIzKSB7XG4gICAgICAgIHMxID0gcGVnJGMzNTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM2KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIGlmIChwZWckYzM3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICBpZiAocGVnJGMzNy50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzM5KCk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gW107XG4gICAgICAgIGlmIChwZWckYzQwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgICBpZiAocGVnJGM0MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzM5KCk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVF1b3RlZFN0cmluZygpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzQpIHtcbiAgICAgICAgczEgPSBwZWckYzQyO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDMpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlQmxvY2tFeHByZXNzaW9uKCk7XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZVN0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlQmxvY2tFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzNCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzQyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQzKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzQ0KHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VTdHJpbmcoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gW107XG4gICAgICBzMiA9IHBlZyRwYXJzZVN0cmluZ0RhdGEoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZVN0cmluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNDUoczEpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVN0cmluZ0RhdGEoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIGlmIChwZWckYzQ2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNDgpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjNDg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzUwKCk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQ4KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNDg7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICAgIHMyID0gdm9pZCAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjNTEoKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNTIpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzUyO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTMpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM1NCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM1NSkge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1NTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTYpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzU3KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM1OCkge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzU4O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzU5KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzYwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNjEpIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzYxO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjIpOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM2MygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM2NCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM2NDtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjUpOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzY2KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM2Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzY3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY4KTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzY5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNzA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3MSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM3MihzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNzM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzc0KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJGMzNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNik7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM3NSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUVzY2FwZWRTdHJpbmcoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzc2KSB7XG4gICAgICAgIHMxID0gcGVnJGM3NjtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzc3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNzgoKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNzkpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjNzk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzgwKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM3OCgpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Nikge1xuICAgICAgICAgICAgczEgPSBwZWckYzgxO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzgyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gW107XG4gICAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Nikge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjODE7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4Mik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gdm9pZCAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzEyKHM1KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDk2KSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzgxO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4Mik7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMTIoczUpO1xuICAgICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDk2KSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzgxO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4Mik7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjODMoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUV4cHJlc3Npb25QYXRoKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlRXhwcmVzc2lvbk5hbWUoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzg0KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFeHByZXNzaW9uTmFtZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzg1KSB7XG4gICAgICAgIHMyID0gcGVnJGM4NTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzg2KTsgfVxuICAgICAgfVxuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgaWYgKHBlZyRjODcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjODgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgIGlmIChwZWckYzg3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgczMgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjODgpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjODkoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUV4cHJlc3Npb25BdHRyaWJ1dGUoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZVByaW1pdGl2ZSgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjOTAoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZUVzY2FwZWRTdHJpbmcoKTtcbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzkwKHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlRXhwcmVzc2lvblBhdGgoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMyOTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzApOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gdm9pZCAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM5MShzMik7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMSA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlSW5saW5lRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjOTIoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZVF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjOTMoczIpO1xuICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUV4cHJlc3Npb25BdHRyaWJ1dGVzKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBbXTtcbiAgICAgIHMxID0gcGVnJHBhcnNlRXhwcmVzc2lvbkF0dHJpYnV0ZSgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwLnB1c2goczEpO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlRXhwcmVzc2lvbkF0dHJpYnV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFeHByZXNzaW9uSGFzaFZhbHVlKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBzMCA9IHBlZyRwYXJzZVByaW1pdGl2ZSgpO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJHBhcnNlRXNjYXBlZFN0cmluZygpO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRwYXJzZUV4cHJlc3Npb25QYXRoKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZUlubGluZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZVF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlRXhwcmVzc2lvbkhhc2hBdHRyaWJ1dGUoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZUV4cHJlc3Npb25OYW1lKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMyOTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZUV4cHJlc3Npb25IYXNoVmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzMxKHMyLCBzNCk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFeHByZXNzaW9uSGFzaCgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gW107XG4gICAgICBzMSA9IHBlZyRwYXJzZUV4cHJlc3Npb25IYXNoQXR0cmlidXRlKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VFeHByZXNzaW9uSGFzaEF0dHJpYnV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjOTQpIHtcbiAgICAgICAgczEgPSBwZWckYzk0O1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VFeHByZXNzaW9uTmFtZSgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZUV4cHJlc3Npb25BdHRyaWJ1dGVzKCk7XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2VFeHByZXNzaW9uSGFzaCgpO1xuICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjOTYpIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJGM5NjtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5Nyk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM5OChzMiwgczMsIHM0KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VTdGFydEJsb2NrRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzk5KSB7XG4gICAgICAgIHMxID0gcGVnJGM5OTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwMCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZUV4cHJlc3Npb25OYW1lKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlRXhwcmVzc2lvbkF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZUV4cHJlc3Npb25IYXNoKCk7XG4gICAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlc3BhY2VzKCk7XG4gICAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM1ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM5Nikge1xuICAgICAgICAgICAgICAgICAgczYgPSBwZWckYzk2O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk3KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzEwMShzMiwgczMsIHM0KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VDbG9zZUJsb2NrRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzEwMikge1xuICAgICAgICBzMSA9IHBlZyRjMTAyO1xuICAgICAgICBwZWckY3VyclBvcyArPSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTAzKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlRXhwcmVzc2lvbk5hbWUoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjOTYpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGM5NjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5Nyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyMyhzMik7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlSW52ZXJzZUJsb2NrRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjMTA0KSB7XG4gICAgICAgIHMxID0gcGVnJGMxMDQ7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VDb250ZW50KCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM0NChzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQmxvY2tFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlU3RhcnRCbG9ja0V4cHJlc3Npb24oKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZUNvbnRlbnQoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlSW52ZXJzZUJsb2NrRXhwcmVzc2lvbigpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlQ2xvc2VCbG9ja0V4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzEwNihzMSwgczIsIHMzLCBzNCk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VJbmxpbmVFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICBzMSA9IHBlZyRjMTA3O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTA4KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlRXhwcmVzc2lvbk5hbWUoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VFeHByZXNzaW9uQXR0cmlidXRlcygpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlRXhwcmVzc2lvbkhhc2goKTtcbiAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VzcGFjZXMoKTtcbiAgICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczUgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJGMxMDk7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEwKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzk4KHMyLCBzMywgczQpO1xuICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUNhbGxFeHByZXNzaW9uQXR0cmlidXRlKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgIHMxID0gcGVnJGMxMTE7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMTIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VDYWxsRXhwcmVzc2lvbkF0dHJpYnV0ZSgpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjOTAoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZXNwYWNlcygpO1xuICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2VFeHByZXNzaW9uSGFzaFZhbHVlKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM5MChzMik7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQ2FsbEV4cHJlc3Npb25BdHRyaWJ1dGVzKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBbXTtcbiAgICAgIHMxID0gcGVnJHBhcnNlQ2FsbEV4cHJlc3Npb25BdHRyaWJ1dGUoKTtcbiAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgczEgPSBwZWckcGFyc2VDYWxsRXhwcmVzc2lvbkF0dHJpYnV0ZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQ2FsbEV4cHJlc3Npb24oKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VFeHByZXNzaW9uTmFtZSgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICBzMiA9IHBlZyRjMTA3O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VDYWxsRXhwcmVzc2lvbkF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckYzEwOTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExMCk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzExMyhzMSwgczMpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlRXhwcmVzc2lvbkNvbW1lbnQoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzExNCkge1xuICAgICAgICBzMSA9IHBlZyRjMTE0O1xuICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTE1KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMTYpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjMTE2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMTcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gdm9pZCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgczUgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgczQgPSBwZWckYzEyKHM1KTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMTYpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJGMxMTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTE3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzEyKHM1KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNCkgPT09IHBlZyRjMTE2KSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMTE2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExNyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxMTgoczIpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGMxMTkpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMTE5O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMjApOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBbXTtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjOTYpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJGM5NjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5Nyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgICAgczUgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMxMihzNSk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjOTYpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzk2O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTcpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHZvaWQgMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExKTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMxMihzNSk7XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzk2KSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGM5NjtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk3KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMTE4KHMyKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVByaW1pdGl2ZSgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA1KSA9PT0gcGVnJGMxMjEpIHtcbiAgICAgICAgczEgPSBwZWckYzEyMTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gNTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyMik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEyMygpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMjQpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMTI0O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMjUpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzEyNigpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNCkgPT09IHBlZyRjMTI3KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTI3O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyOCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxMjkoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA5KSA9PT0gcGVnJGMxMzApIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzEzMDtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gOTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzMSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzEzMigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZVNpZ25lZEludGVnZXIoKTtcbiAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nikge1xuICAgICAgICAgICAgICAgICAgczIgPSBwZWckYzEzMztcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMzQpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlRGVjaW1hbERpZ2l0KCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTM1KCk7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VTaWduZWRJbnRlZ2VyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxMzUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlU2lnbmVkSW50ZWdlcigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChwZWckYzEzNi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzNyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlRGVjaW1hbERpZ2l0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURlY2ltYWxEaWdpdCgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjMTM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTM5KTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc3BhY2VzKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBbXTtcbiAgICAgIGlmIChwZWckYzE0MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0MSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgICBpZiAocGVnJGMxNDAudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0MSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcblxuICAgIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwZWckcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICBwZWckZmFpbCh7IHR5cGU6IFwiZW5kXCIsIGRlc2NyaXB0aW9uOiBcImVuZCBvZiBpbnB1dFwiIH0pO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24oXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQsXG4gICAgICAgIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckF0KHBlZyRtYXhGYWlsUG9zKSA6IG51bGwsXG4gICAgICAgIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoXG4gICAgICAgICAgPyBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRtYXhGYWlsUG9zLCBwZWckbWF4RmFpbFBvcyArIDEpXG4gICAgICAgICAgOiBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRtYXhGYWlsUG9zLCBwZWckbWF4RmFpbFBvcylcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTeW50YXhFcnJvcjogcGVnJFN5bnRheEVycm9yLFxuICAgIHBhcnNlOiAgICAgICBwZWckcGFyc2VcbiAgfTtcbn0pKCk7XG4iXX0=