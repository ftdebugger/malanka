<Header>

</Header>

<Section title="Introduction">
    <div class="text">
        Create modern applications with new technologies
    </div>
</Section>

<Section title="Goals">
    <div class="text">
        Write HTML with handlebars syntax and get fully reactive application

        <Code saveSpaces=true lang="handlebars">`
<div class="test {{varClass}}">
    <Button onclick=onButtonClicked>
        {{@model.value}} {{! Watch value}}
    </Button>
</div>`
        </Code>

        Use reactive when you need it only

        <Code saveSpaces=true lang="handlebars">`
{{model.value}} will render once,
but {{@model.value}} will be updated automatically`
        </Code>

        And where you need it

        <Code saveSpaces=true lang="handlebars">`
            <input value=@model.value data-initial="It was {{model.value}}"/>`
        </Code>

        Write your own components

        <Code saveSpaces=true>`
import {Component, Defaults} from '../../../es5';

import styles from './Button.css';
import template from './Button.hbs';

@Defaults({template, styles, tagName: 'button'})
export class Button extends Component {

}
            `
        </Code>

        And use it anywhere

        <Code saveSpaces=true lang="handlebars">`
            <Button>This is custom button</Button>`
        </Code>
    </div>
</Section>

<Section title="Components">
    <div class="text">
        Custom components is a base of application. To create your first component all you need is
        create new class and extend it from <code>Component</code>. For example create custom input,
        which allow two-way data binding for value attribute

        <Tabs scope="tabs" js="Component" css="Styles" hbs="Template" active="js" result="Result" usage="Usage">
            <Code as=tabs.body.js>{{require "!!raw!../Input/Input.js"}}</Code>
            <Code as=tabs.body.css lang="css">{{require "!!raw!../Input/Input.css"}}</Code>
            <Code as=tabs.body.hbs lang="handlebars">{{require "!!raw!../Input/Input.hbs"}}</Code>
            <Code as=tabs.body.usage lang="handlebars" saveSpaces=true>`
                <Input value=@model.value />

<p>Input value: {{@model.value}}</p>`
            </Code>
            <div as=tabs.body.result class="result">
                <Input value=@model.value/>

                <p>Input value: {{@model.value}}</p>
            </div>
        </Tabs>

        Injected <code>styles</code> in component unique for this components, internally it use CSS modules. Default
        class <code>root</code> will be set as default component class. Any use of classes in template automatically
        replace to CSS modules generated class.

        <Code saveSpaces=true lang="handlebars">`
            <div class="header"></div>`
        </Code>

        will be equivalent to

        <Code saveSpaces=true lang="handlebars">`
            <div class=styles.header></div>`
        </Code>

    </div>
</Section>

<Section title="Templates">
    <div class="text">
        Every tag in template is <code>Component</code>. By default all unknown tags is default <code>Component</code>.
        If tag name is one of known it will be compiled to specific component. When you put variable it will be compiled
        to <code>TextComponent</code> which in DOM will be presented as <code>Text</code>.
    </div>

    <div class="text">
        Templates are reactive by demand. You can use watch variables in any place of template

        <Code saveSpaces=true lang="handlebars">`
            Place variable {{@model.value}} inline.

Put into attribute <span id=@model.id></span>.

Or use inside block helper

{{#if @model.value}}
    Value is {{@model.value}}
{{else}}
    Value is zero
{{/if}}

Combinations is also works

<div style="color: {{#if @model.value}}red{{else}}green{{/if}}">
    Wow!
</div>
            `
        </Code>

        All variables links to context of parent component. Unlike handlebars, when you inside block helper
        or another component variables still link to parent

        <Code saveSpaces=true lang="handlebars">`
This is {{test}}
<div>
    This is still {{test}}

    <Button>
        And this is same {{test}}
    </Button>
</div>
            `
        </Code>

        If you want access component properties you need to declare scope

        <Code saveSpaces=true lang="handlebars">`
This is {{test}}
<Button scope="button">
    This is button {{button.test}}, but {{test}} is still the same
</Button>
            `
        </Code>

        Sometimes you need to link to child component, you can do it with <code>as</code> attribute for any component

        <Code saveSpaces=true lang="handlebars">`
<Button as=button>
    Button can be accessed in parent component as this.button
</Button>

<Awesome scope="awe">
    <Button as=awe.button>
        Button can be accessed in Awesome component as this.button
    </Button>
</Awesome>
            `
        </Code>
    </div>
</Section>

<Section title="Models">

</Section>
{{!--<h1 class="header header_big">Example</h1>--}}

{{!--<div class="example">--}}
    {{!--<h3>Input</h3>--}}

    {{!--<div>--}}
        {{!--<Input value=@searchState.query onenter=onSearch />--}}
    {{!--</div>--}}

    {{!--<h4>Binding value</h4>--}}
    {{!--<div>--}}
        {{!--{{@searchState.query}}--}}
    {{!--</div>--}}
{{!--</div>--}}

{{!--<div class="example">--}}
    {{!--<h3>Collection</h3>--}}

    {{!--<Columns scope="cols">--}}
        {{!--{{#each repositories tagName="table" as=cols.columnA scope="repository"}}--}}
            {{!--<RepositoryTableRow model=repository />--}}
        {{!--{{/each}}--}}

        {{!--<RepositoriesTable collection=repositories as=cols.columnB />--}}
    {{!--</Columns>--}}
{{!--</div>--}}